
function draw_box(x1, x2, y1, y2, format)
	plot([x1:x2], ones(size([x1:x2])) * y1, format);
	plot([x1:x2], ones(size([x1:x2])) * y2, format);
	plot(ones(size([y1:y2])) * x1, [y1:y2], format);
	plot(ones(size([y1:y2])) * x2, [y1:y2], format);
endfunction

function mu = get_mean(A, x1, x2, y1, y2)
	mu = zeros(1, 3);
	amount = 0;
	for x = x1:x2
		for y = y1:y2
			v = double(reshape(A(x, y, :), 1, 3));
			mu = mu + v;	
			amount = amount + 1;
		endfor
	endfor
	mu = mu / amount;
endfunction

function sigma = get_sigma(A, x1, x2, y1, y2)
	mu = get_mean(A, x1, x2, y1, y2);
	sigma = zeros(3, 3);
	amount = 0;
	for x = x1:x2
		for y = y1:y2
			v = double(reshape(A(x, y, :), 1, 3) - mu);	
			sigma = sigma + (v' * v);
			amount = amount + 1;
		endfor
	endfor
	sigma = sigma / (amount - 1);
endfunction

IN = imread('circular.jpg');
imshow(IN); 
hold("on");

% first_training_region
y1 = 50
y2 = 250
x1 = 800
x2 = 1100
%draw_box(x1, x2, y1, y2, 'r.');
mu1 = get_mean(IN, x1, x2, y1, y2);
sigma1 = get_sigma(IN, x1, x2, y1, y2);

% second_training_region
y1 = 430
y2 = 550
x1 = 300
x2 = 420
%draw_box(x1, x2, y1, y2, 'b.');
mu2 = get_mean(IN, x1, x2, y1, y2);
sigma2 = get_sigma(IN, x1, x2, y1, y2);

% third_training_region
y1 = 270
y2 = 380
x1 = 545
x2 = 665
%draw_box(x1, x2, y1, y2, 'g.');
mu3 = get_mean(IN, x1, x2, y1, y2);
sigma3 = get_sigma(IN, x1, x2, y1, y2);

%pause();

pa1 = (1.0/3);
pa2 = (1.0/3);
pa3 = (1.0/3);

confusion = zeros(3, 3)
OUT = ones(1400, 1312, 3);

% First area

y1 = 50
y2 = 250
x1 = 800
x2 = 1100

for x = x1:x2
	for y = y1:y2
		printf("x: %d y: %d\n", x, y);
		to_predict = reshape(double(IN(x, y, :)), 1, 3);
		pb1 = mvnpdf(to_predict, mu1, sigma1) * pa1;
		pb2 = mvnpdf(to_predict, mu2, sigma2) * pa2;
		pb3 = mvnpdf(to_predict, mu3, sigma3) * pa3;
		m = max([pb1, pb2, pb3]);

		if(pb1 == m)
			confusion(1, 1) = confusion(1, 1) + 1;
			OUT(x, y, :) = uint8([0 255 0]);
		elseif(pb2 == m)
			confusion(1, 2) = confusion(1, 2) + 1;
			OUT(x, y, :) = uint8([255 0 0]);
		elseif(pb3 == m)
			confusion(1, 3) = confusion(1, 3) + 1;
			OUT(x, y, :) = uint8([0 0 255]);
		endif
	endfor
endfor

% Second area

y1 = 430
y2 = 550
x1 = 300
x2 = 420

for x = x1:x2
	for y = y1:y2
		printf("x: %d y: %d\n", x, y);
		to_predict = reshape(double(IN(x, y, :)), 1, 3);
		pb1 = mvnpdf(to_predict, mu1, sigma1) * pa1;
		pb2 = mvnpdf(to_predict, mu2, sigma2) * pa2;
		pb3 = mvnpdf(to_predict, mu3, sigma3) * pa3;
		m = max([pb1, pb2, pb3]);

		if(pb1 == m)
			confusion(2, 1) = confusion(2, 1) + 1;
			OUT(x, y, :) = uint8([0 255 0]);
		elseif(pb2 == m)
			confusion(2, 2) = confusion(2, 2) + 1;
			OUT(x, y, :) = uint8([255 0 0]);
		elseif(pb3 == m)
			confusion(2, 3) = confusion(2, 3) + 1;
			OUT(x, y, :) = uint8([0 0 255]);
		endif
	endfor
endfor

% Third area
y1 = 270
y2 = 380
x1 = 545
x2 = 665

for x = x1:x2
	for y = y1:y2
		printf("x: %d y: %d\n", x, y);
		to_predict = reshape(double(IN(x, y, :)), 1, 3);
		pb1 = mvnpdf(to_predict, mu1, sigma1) * pa1;
		pb2 = mvnpdf(to_predict, mu2, sigma2) * pa2;
		pb3 = mvnpdf(to_predict, mu3, sigma3) * pa3;
		m = max([pb1, pb2, pb3]);

		if(pb1 == m)
			confusion(3, 1) = confusion(3, 1) + 1;
			OUT(x, y, :) = uint8([0 255 0]);
		elseif(pb2 == m)
			confusion(3, 2) = confusion(3, 2) + 1;
			OUT(x, y, :) = uint8([255 0 0]);
		elseif(pb3 == m)
			confusion(3, 3) = confusion(3, 3) + 1;
			OUT(x, y, :) = uint8([0 0 255]);
		endif
	endfor
endfor

save -ascii confusion_training confusion
imshow(uint8(OUT));
imwrite(uint8(OUT), "classified_confusion.png");
pause();
